// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v3.20.3
// source: bi/v1/method.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBiPing = "/bi.v1.Bi/Ping"

type BiHTTPServer interface {
	// Ping Sends a greeting
	Ping(context.Context, *PingRequest) (*PongReply, error)
}

func RegisterBiHTTPServer(s *http.Server, srv BiHTTPServer) {
	r := s.Route("/")
	r.GET("/ping", _Bi_Ping0_HTTP_Handler(srv))
}

func _Bi_Ping0_HTTP_Handler(srv BiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBiPing)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Ping(ctx, req.(*PingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PongReply)
		return ctx.Result(200, reply)
	}
}

type BiHTTPClient interface {
	Ping(ctx context.Context, req *PingRequest, opts ...http.CallOption) (rsp *PongReply, err error)
}

type BiHTTPClientImpl struct {
	cc *http.Client
}

func NewBiHTTPClient(client *http.Client) BiHTTPClient {
	return &BiHTTPClientImpl{client}
}

func (c *BiHTTPClientImpl) Ping(ctx context.Context, in *PingRequest, opts ...http.CallOption) (*PongReply, error) {
	var out PongReply
	pattern := "/ping"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBiPing))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
