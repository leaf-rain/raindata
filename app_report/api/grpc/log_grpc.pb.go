// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: metadata.proto

package raindata_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogServerClient is the client API for LogServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogServerClient interface {
	// ClientStreamingE
	StreamReport(ctx context.Context, opts ...grpc.CallOption) (LogServer_StreamReportClient, error)
}

type logServerClient struct {
	cc grpc.ClientConnInterface
}

func NewLogServerClient(cc grpc.ClientConnInterface) LogServerClient {
	return &logServerClient{cc}
}

func (c *logServerClient) StreamReport(ctx context.Context, opts ...grpc.CallOption) (LogServer_StreamReportClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogServer_ServiceDesc.Streams[0], "/raindata_pb.LogServer/StreamReport", opts...)
	if err != nil {
		return nil, err
	}
	x := &logServerStreamReportClient{stream}
	return x, nil
}

type LogServer_StreamReportClient interface {
	Send(*StreamReportRequest) error
	CloseAndRecv() (*StreamReportResponse, error)
	grpc.ClientStream
}

type logServerStreamReportClient struct {
	grpc.ClientStream
}

func (x *logServerStreamReportClient) Send(m *StreamReportRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logServerStreamReportClient) CloseAndRecv() (*StreamReportResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamReportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogServerServer is the server API for LogServer service.
// All implementations must embed UnimplementedLogServerServer
// for forward compatibility
type LogServerServer interface {
	// ClientStreamingE
	StreamReport(LogServer_StreamReportServer) error
	mustEmbedUnimplementedLogServerServer()
}

// UnimplementedLogServerServer must be embedded to have forward compatible implementations.
type UnimplementedLogServerServer struct {
}

func (UnimplementedLogServerServer) StreamReport(LogServer_StreamReportServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamReport not implemented")
}
func (UnimplementedLogServerServer) mustEmbedUnimplementedLogServerServer() {}

// UnsafeLogServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServerServer will
// result in compilation errors.
type UnsafeLogServerServer interface {
	mustEmbedUnimplementedLogServerServer()
}

func RegisterLogServerServer(s grpc.ServiceRegistrar, srv LogServerServer) {
	s.RegisterService(&LogServer_ServiceDesc, srv)
}

func _LogServer_StreamReport_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogServerServer).StreamReport(&logServerStreamReportServer{stream})
}

type LogServer_StreamReportServer interface {
	SendAndClose(*StreamReportResponse) error
	Recv() (*StreamReportRequest, error)
	grpc.ServerStream
}

type logServerStreamReportServer struct {
	grpc.ServerStream
}

func (x *logServerStreamReportServer) SendAndClose(m *StreamReportResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logServerStreamReportServer) Recv() (*StreamReportRequest, error) {
	m := new(StreamReportRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogServer_ServiceDesc is the grpc.ServiceDesc for LogServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raindata_pb.LogServer",
	HandlerType: (*LogServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamReport",
			Handler:       _LogServer_StreamReport_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "metadata.proto",
}
